{"version":3,"sources":["../../../node_modules/bourbon/app/assets/stylesheets/css3/_font-face.scss","fonts.sass","../../../node_modules/bourbon/app/assets/stylesheets/helpers/_font-source-declaration.scss"],"names":[],"mappings":"AAUE;EACE,6BCT8B;EDU9B,mBARY;EASZ,oBAVa;EAYb,uNESiC,EAAA;;AFdnC;EACE,0BCR2B;EDS3B,mBARY;EASZ,oBAVa;EAYb,qMESiC,EAAA;;AFdnC;EACE,0BCP2B;EDQ3B,mBARY;EASZ,oBAVa;EAYb,qMESiC,EAAA","file":"fonts.min.css","sourcesContent":["@mixin font-face(\n  $font-family,\n  $file-path,\n  $weight: normal,\n  $style: normal,\n  $asset-pipeline: $asset-pipeline,\n  $file-formats: eot woff2 woff ttf svg) {\n\n  $font-url-prefix: font-url-prefixer($asset-pipeline);\n\n  @font-face {\n    font-family: $font-family;\n    font-style: $style;\n    font-weight: $weight;\n\n    src: font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats,\n      $font-url-prefix\n    );\n  }\n}\n","@import \"bourbon\";\n\n@include font-face(\"RobotoRegular\", \"/fonts/RobotoRegular/RobotoRegular\", $file-formats: eot woff ttf);\n@include font-face(\"RobotoBold\", \"/fonts/RobotoBold/RobotoBold\", $file-formats: eot woff ttf);\n@include font-face(\"RobotoBold\", \"/fonts/RobotoBold/RobotoBold\", $file-formats: eot woff ttf);\n","// Used for creating the source string for fonts using @font-face\n// Reference: http://goo.gl/Ru1bKP\n\n@function font-url-prefixer($asset-pipeline) {\n  @if $asset-pipeline == true {\n    @return font-url;\n  } @else {\n    @return url;\n  }\n}\n\n@function font-source-declaration(\n  $font-family,\n  $file-path,\n  $asset-pipeline,\n  $file-formats,\n  $font-url) {\n\n  $src: ();\n\n  $formats-map: (\n    eot:   \"#{$file-path}.eot?#iefix\" format(\"embedded-opentype\"),\n    woff2: \"#{$file-path}.woff2\" format(\"woff2\"),\n    woff:  \"#{$file-path}.woff\" format(\"woff\"),\n    ttf:   \"#{$file-path}.ttf\" format(\"truetype\"),\n    svg:   \"#{$file-path}.svg##{$font-family}\" format(\"svg\")\n  );\n\n  @each $key, $values in $formats-map {\n    @if contains($file-formats, $key) {\n      $file-path: nth($values, 1);\n      $font-format: nth($values, 2);\n\n      @if $asset-pipeline == true {\n        $src: append($src, font-url($file-path) $font-format, comma);\n      } @else {\n        $src: append($src, url($file-path) $font-format, comma);\n      }\n    }\n  }\n\n  @return $src;\n}\n"]}